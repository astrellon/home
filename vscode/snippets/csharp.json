{
/*
    // Place your snippets for C# here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    "Print to console": {
        "prefix": "log",
        "body": [
            "console.log('$1');",
            "$2"
        ],
        "description": "Log output to console"
    }
*/
    "Namespace and static class": {
        "prefix": "namestaticclass",
        "body": [
            "namespace $1",
            "{",
            "\tpublic static class $TM_FILENAME_BASE",
            "\t{",
            "\t\t#region Methods",
            "\t\t$2",
            "\t\t#endregion",
            "\t}",
            "}"
        ]
    },
    "Namespace and Json Serializer": {
        "prefix": "namejson",
        "body": [
            "using System;",
            "using System.Json;",
            "",
            "namespace $1",
            "{",
            "\tpublic static class $TM_FILENAME_BASE",
            "\t{",
            "\t\t#region Methods",
            "\t\tpublic static JsonObject ToJson($2 input)",
            "\t\t{",
            "\t\t\t$4",
            "\t\t}",
            "",
            "\t\tpublic static $2 FromJson(JsonObject input)",
            "\t\t{",
            "\t\t}",
            "\t\t#endregion",
            "\t}",
            "}"
        ]
    },
    "Namespace and class": {
        "prefix": "nameclass",
        "body": [
            "namespace $1",
            "{",
            "\tpublic class $TM_FILENAME_BASE",
            "\t{",
            "\t\t#region Fields",
            "\t\t#endregion",
            "",
            "\t\t#region Constructor",
            "\t\tpublic $TM_FILENAME_BASE()",
            "\t\t{",
            "\t\t\t$2",
            "\t\t}",
            "\t\t#endregion",
            "",
            "\t\t#region Methods",
            "\t\t#endregion",
            "\t}",
            "}"
        ]
    },
    "Namespace and struct": {
        "prefix": "namestruct",
        "body": [
            "namespace $1",
            "{",
            "\tpublic struct $TM_FILENAME_BASE",
            "\t{",
            "\t\t#region Fields",
            "\t\t#endregion",
            "",
            "\t\t#region Constructor",
            "\t\tpublic $TM_FILENAME_BASE()",
            "\t\t{",
            "\t\t\t$2",
            "\t\t}",
            "\t\t#endregion",
            "",
            "\t\t#region Methods",
            "\t\t#endregion",
            "\t}",
            "}"
        ]
    },
    "Namespace and Monobehaviour": {
        "prefix": "nameunity",
        "body": [
            "using UnityEngine;",
            "",
            "namespace $1",
            "{",
            "\tpublic class $TM_FILENAME_BASE : MonoBehaviour",
            "\t{",
            "\t\t#region Fields",
            "\t\t#endregion",
            "",
            "\t\t#region Unity Methods",
            "\t\tvoid Start()",
            "\t\t{",
            "\t\t}",
            "",
            "\t\tvoid Update()",
            "\t\t{",
            "\t\t}",
            "\t\t#endregion",
            "",
            "\t\t#region Methods",
            "\t\t#endregion",
            "\t}",
            "}"
        ]
    },
    "Namespace and ScriptableObject": {
        "prefix": "nameunityscript",
        "body": [
            "using UnityEngine;",
            "",
            "namespace $1",
            "{",
            "\t[CreateAssetMenu(fileName=\"$TM_FILENAME_BASE\", menuName=\"$1/$2\")]",
            "\tpublic class $TM_FILENAME_BASE : ScriptableObject",
            "\t{",
            "\t\t#region Fields",
            "\t\t#endregion",
            "\t}",
            "}"
        ]
    },
    "Namespace and interface": {
        "prefix": "nameface",
        "body": [
            "namespace $1",
            "{",
            "\tpublic interface $TM_FILENAME_BASE",
            "\t{",
            "\t}",
            "}"
        ]
    },
    "Property getter": {
        "prefix": "pget",
        "body": [
            "{ get; }"
        ]
    },
    "Property getter and setter": {
        "prefix": "pgetset",
        "body": [
            "{ get; set; }"
        ]
    },
    "Property getter and private setter": {
        "prefix": "pgetpset",
        "body": [
            "{ get; private set; }"
        ]
    },
    "Dictionary": {
        "prefix": "dict",
        "body": [
            "Dictionary<$1, $2> $3 = new Dictionary<$1, $2>();"
        ]
    },
    "Value Type": {
        "prefix": "valuetype",
        "body": [
            "using System;",
            "",
            "namespace $1",
            "{",
            "\tpublic struct $TM_FILENAME_BASE : IEquatable<$2>",
            "\t{",
            "\t\t#region Fields",
            "\t\tpublic readonly $2 Value;",
            "\t\t#endregion",
            "",
            "\t\t#region Constructor",
            "\t\tpublic $TM_FILENAME_BASE($2 value)",
            "\t\t{",
            "\t\t\tthis.Value = string.Intern(value);",
            "\t\t}",
            "\t\t#endregion",
            "",
            "\t\t#region Methods",
            "\t\tpublic bool Equals($TM_FILENAME_BASE other)",
            "\t\t{",
            "\t\t\treturn this.Value == other.Value;",
            "\t\t}",
            "",
            "\t\tpublic override bool Equals(object obj)",
            "\t\t{",
            "\t\t\tif (obj.GetType() != typeof($TM_FILENAME_BASE))",
            "\t\t\t{",
            "\t\t\t\treturn false;",
            "\t\t\t}",
            "",
            "\t\t\treturn (($TM_FILENAME_BASE)obj).Value == this.Value;",
            "\t\t}",
            "",
            "\t\tpublic bool Equals($2 other)",
            "\t\t{",
            "\t\t\treturn this.Value == other;",
            "\t\t}",
            "",
            "\t\tpublic override int GetHashCode()",
            "\t\t{",
            "\t\t\treturn this.Value.GetHashCode();",
            "\t\t}",
            "",
            "\t\tpublic override string ToString()",
            "\t\t{",
            "\t\t\treturn $\"$TM_FILENAME_BASE: {this.Value}\";",
            "\t\t}",
            "",
            "\t\tpublic static $TM_FILENAME_BASE FromValue($2 input)",
            "\t\t{",
            "\t\t\treturn new $TM_FILENAME_BASE(input);",
            "\t\t}",
            "",
            "\t\tpublic static bool operator==($TM_FILENAME_BASE input1, $TM_FILENAME_BASE input2)",
            "\t\t{",
            "\t\t\treturn input1.Value == input2.Value;",
            "\t\t}",
            "",
            "\t\tpublic static bool operator!=($TM_FILENAME_BASE input1, $TM_FILENAME_BASE input2)",
            "\t\t{",
            "\t\t\treturn input1.Value != input2.Value;",
            "\t\t}",
            "\t\t#endregion",
            "\t}",
            "}"
        ]
    }
}